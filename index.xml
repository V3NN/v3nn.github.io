<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>V3NN</title>
        <link>http://example.org/</link>
        <description>V3NN</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 01 Dec 2023 00:00:00 &#43;0000</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>一问了解MySQL JSON相关函数</title>
    <link>http://example.org/posts/mysql/json-function-reference/</link>
    <pubDate>Fri, 01 Dec 2023 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/mysql/json-function-reference/</guid>
    <description><![CDATA[1. 介绍 JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，目前常用于前后段数据传输。
MySQL 从 5.7.8 版本开始提供 JSON 数据类型及相关函数，其通过新增JSON对象类型和相应的函数来解析和生成 JSON格式数据，使得 MySQL 在处理 JSON数据方面更加高效便捷，以下介绍常用相关函数。
2. 创建JSON JSON_ARRAY JSON_ARRAY([val[, val] ...])
接受一个值列表(可能为NULL)，并返回一个包含这些值的 JSON 数组
mysql&gt; SELECT JSON_ARRAY(1, &#34;abc&#34;, NULL, TRUE, CURTIME()); +---------------------------------------------+ | JSON_ARRAY(1, &#34;abc&#34;, NULL, TRUE, CURTIME()) | +---------------------------------------------+ | [1, &#34;abc&#34;, null, true, &#34;11:30:24.000000&#34;] | +---------------------------------------------+ JSON_OBJECT JSON_OBJECT([key, val[, key, val] ...])
接受一个键值对(可以为NULL)列表，并返回一个包含这些键值对的 JSON 对象
mysql&gt; SELECT JSON_OBJECT(&#39;id&#39;, 87, &#39;name&#39;, &#39;carrot&#39;, &#39;addr&#39;, null); +--------------------------------------------------------------+ | SELECT JSON_OBJECT(&#39;id&#39;, 87, &#39;name&#39;, &#39;carrot&#39;, &#39;addr&#39;, null) | +--------------------------------------------------------------+ | {&#34;id&#34;: 87, &#34;addr&#34;: null, &#34;name&#34;: &#34;carrot&#34;} | +--------------------------------------------------------------+ 3.]]></description>
</item>
<item>
    <title>Markdown 基本语法 1</title>
    <link>http://example.org/posts/my-first-post/</link>
    <pubDate>Sun, 01 Dec 2019 21:57:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/my-first-post/</guid>
    <description><![CDATA[这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例.
Note 这篇文章借鉴了一篇很棒的来自 Grav 的文章 .
如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面 .
事实上, 编写 Web 内容很麻烦. <strong><ruby>WYSIWYG<rt>所见即所得</rt></ruby></strong> 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑.
没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式.
一些主要好处是:
Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说:
The Stormtroopocat The Stormtroopocat 1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃:
## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 2 注释 注释是和 HTML 兼容的：]]></description>
</item>
</channel>
</rss>
